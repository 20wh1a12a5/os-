AIM : Write C program to simulate the concept of dining -philosopher problem. PROGRAM:
#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include<unistd.h>
#define N 5
#define THINKING 2
#define HUNGRY 1
#define EATING 0
#define LEFT (pno + 4) % N
#define RIGHT (pno + 1) % N

int state[N];
int phil[N] = { 0, 1, 2, 3, 4 };

sem_t mutex;
sem_t S[N];

void test(int pno)
{
if (state[pno] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING) {
state[pno] = EATING;
sleep(2);

printf("Philosopher %d takes fork %d and %d\n",pno + 1, LEFT + 1, pno + 1);

printf("Philosopher %d is Eating\n", pno + 1);

sem_post(&S[pno]);
}
}

void take_fork(int pno)
{
sem_wait(&mutex);

state[pno] = HUNGRY;

printf("Philosopher %d is Hungry\n", pno + 1);
test(pno);

sem_post(&mutex);
sem_wait(&S[pno]);
sleep(1);
}

// put down chopsticks
void put_fork(int pno)

{

sem_wait(&mutex);
state[pno] = THINKING;

printf("Philosopher %d putting fork %d and %d down\n",pno + 1, LEFT + 1, pno + 1);
printf("Philosopher %d is thinking\n", pno + 1);
test(LEFT);
test(RIGHT);

sem_post(&mutex);
}

void* philosopher(void* num)
{

while (1) {

int* i = num;

sleep(1);

take_fork(*i);
sleep(0);

put_fork(*i);

}

int main()
{

int i;
pthread_t thread_id[N];
sem_init(&mutex, 0, 1);

for (i = 0; i < N; i++)

sem_init(&S[i], 0, 0);

for (i = 0; i < N; i++) {

// create philosopher processes
pthread_create(&thread_id[i], NULL, philosopher, &phil[i]);

printf("Philosopher %d is thinking\n", i + 1);
}

for (i = 0; i < N; i++)

pthread_join(thread_id[i], NULL);


}
